{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ornel\\\\Coding Projects\\\\School\\\\React-App-1\\\\src\\\\components\\\\Sidebar.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\n/**\r\n * Renders an array of strings passed in that can be filtered and added to as an\r\n * unordered list.\r\n * @returns Component\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Sidebar(_ref) {\n  _s();\n  let {\n    initialMenuItems\n  } = _ref;\n  // TODO: 2. Using a state hook, maintain the current menu items as an array state.\n  let [newMenuItem, setNewMenuItem] = useState(\"\");\n  let [menuItems, setMenuItems] = useState(initialMenuItems);\n  let [filter, setFilter] = useState(\"\");\n  // Adds a single string passed in as parameter to the state element\n  // \"menuItems\" that holds the set of current menu items.\n\n  //TODO: 3. Add a new menu item to the correct variable associated with this class.\n  //This involves adding a parameter and changing a class instance variable (props).\n  let addMenuItem = useCallback(() => {\n    if (newMenuItem.trim() === \"\") return; // Prevents adding empty items\n    setMenuItems([newMenuItem, ...menuItems]); // Add a new item to the list\n    setNewMenuItem(\"\"); // Clears input field\n    console.log(\"Added menu item\");\n  }, [newMenuItem, menuItems]);\n\n  // TODO: 4. Display ONLY the menu items that contain the filter element value \"term\" in them.\n  // Each menu item should be an unordered list item wrapped in an unordered list (ul) element.\n  const filteredItems = menuItems.filter(item => item.toLowerCase().includes(filter.toLowerCase()));\n\n  // TODO: 1. Render inside the outer div an unordered list of the menu items, with each string in the array its own item.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"newMenuItemValue\",\n      value: newMenuItem,\n      onChange: event => setNewMenuItem(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      /* TODO: 3 */\n      onClick: addMenuItem,\n      children: \"Add Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"filter\",\n      type: \"text\",\n      value: filter,\n      onChange: event => setFilter(event.target.value),\n      placeholder: \"Filter by...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(Sidebar, \"/oaa6lp+ngPTBrV4SYZja6S1wK0=\");\n_c = Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["useState","useCallback","Sidebar","initialMenuItems","newMenuItem","setNewMenuItem","menuItems","setMenuItems","filter","setFilter","addMenuItem","trim","console","log","filteredItems","item","toLowerCase","includes","map","index","event","target","value"],"sources":["C:/Users/ornel/Coding Projects/School/React-App-1/src/components/Sidebar.jsx"],"sourcesContent":["import { useState, useCallback } from \"react\"\r\n/**\r\n * Renders an array of strings passed in that can be filtered and added to as an\r\n * unordered list.\r\n * @returns Component\r\n */\r\nexport default function Sidebar({ initialMenuItems }) {\r\n  // TODO: 2. Using a state hook, maintain the current menu items as an array state.\r\n  let [newMenuItem, setNewMenuItem] = useState(\"\")\r\n\r\n  let [menuItems, setMenuItems] = useState(initialMenuItems);\r\n  let [filter, setFilter] = useState(\"\")\r\n  // Adds a single string passed in as parameter to the state element\r\n  // \"menuItems\" that holds the set of current menu items.\r\n\r\n  //TODO: 3. Add a new menu item to the correct variable associated with this class.\r\n  //This involves adding a parameter and changing a class instance variable (props).\r\n  let addMenuItem = useCallback(() => {\r\n    if (newMenuItem.trim() === \"\") return; // Prevents adding empty items\r\n    setMenuItems([newMenuItem, ...menuItems]); // Add a new item to the list\r\n    setNewMenuItem(\"\"); // Clears input field\r\n    console.log(\"Added menu item\");\r\n  }, [newMenuItem, menuItems]);\r\n\r\n  // TODO: 4. Display ONLY the menu items that contain the filter element value \"term\" in them.\r\n  // Each menu item should be an unordered list item wrapped in an unordered list (ul) element.\r\n  const filteredItems = menuItems.filter(item =>\r\n    item.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n\r\n  // TODO: 1. Render inside the outer div an unordered list of the menu items, with each string in the array its own item.\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {filteredItems.map((item, index) => (\r\n        <li key={index}>{item}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      <input\r\n        type=\"text\"\r\n        id=\"newMenuItemValue\"\r\n        value={newMenuItem}\r\n        onChange={(event) => setNewMenuItem(event.target.value)}\r\n      ></input>\r\n      <br />\r\n      <button\r\n        /* TODO: 3 */\r\n        onClick={addMenuItem}>Add Item</button>\r\n      <br />\r\n      <input\r\n        id=\"filter\"\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={(event) => setFilter(event.target.value)}\r\n        placeholder=\"Filter by...\"\r\n      ></input>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C;AACA;AACA;AACA;AACA;AAJA;AAKA,eAAe,SAASC,OAAO,OAAuB;EAAA;EAAA,IAAtB;IAAEC;EAAiB,CAAC;EAClD;EACA,IAAI,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAEhD,IAAI,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAACG,gBAAgB,CAAC;EAC1D,IAAI,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA;;EAEA;EACA;EACA,IAAIU,WAAW,GAAGT,WAAW,CAAC,MAAM;IAClC,IAAIG,WAAW,CAACO,IAAI,EAAE,KAAK,EAAE,EAAE,OAAO,CAAC;IACvCJ,YAAY,CAAC,CAACH,WAAW,EAAE,GAAGE,SAAS,CAAC,CAAC,CAAC,CAAC;IAC3CD,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;IACpBO,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAChC,CAAC,EAAE,CAACT,WAAW,EAAEE,SAAS,CAAC,CAAC;;EAE5B;EACA;EACA,MAAMQ,aAAa,GAAGR,SAAS,CAACE,MAAM,CAACO,IAAI,IACzCA,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACT,MAAM,CAACQ,WAAW,EAAE,CAAC,CAClD;;EAED;EACA,oBACE;IAAA,wBACE;MAAA,UACGF,aAAa,CAACI,GAAG,CAAC,CAACH,IAAI,EAAEI,KAAK,kBAC/B;QAAA,UAAiBJ;MAAI,GAAZI,KAAK;QAAA;QAAA;QAAA;MAAA,QACb;IAAC;MAAA;MAAA;MAAA;IAAA,QACC,eAEL;MACE,IAAI,EAAC,MAAM;MACX,EAAE,EAAC,kBAAkB;MACrB,KAAK,EAAEf,WAAY;MACnB,QAAQ,EAAGgB,KAAK,IAAKf,cAAc,CAACe,KAAK,CAACC,MAAM,CAACC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QACjD,eACT;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MACE;MACA,OAAO,EAAEZ,WAAY;MAAA,UAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAS,eACzC;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MACE,EAAE,EAAC,QAAQ;MACX,IAAI,EAAC,MAAM;MACX,KAAK,EAAEF,MAAO;MACd,QAAQ,EAAGY,KAAK,IAAKX,SAAS,CAACW,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE;MACnD,WAAW,EAAC;IAAc;MAAA;MAAA;MAAA;IAAA,QACnB;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEV;AAAC,GArDuBpB,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}